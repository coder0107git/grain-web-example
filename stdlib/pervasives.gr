export *

# Math operations
primitive incr : Number -> Number = "@incr"
primitive decr : Number -> Number = "@decr"
primitive (+) : (Number, Number) -> Number = "@plus"
primitive (-) : (Number, Number) -> Number = "@minus"
primitive (*) : (Number, Number) -> Number = "@times"
primitive (/) : (Number, Number) -> Number = "@divides"
primitive (%) : (Number, Number) -> Number = "@modulo"

# Number comparisons
primitive (<) : (Number, Number) -> Bool = "@less"
primitive (>) : (Number, Number) -> Bool = "@greater"
primitive (<=) : (Number, Number) -> Bool = "@lesseq"
primitive (>=) : (Number, Number) -> Bool = "@greatereq"

# Boolean operations
primitive (!) : Bool -> Bool = "@not"
primitive (&&) : (Bool, Bool) -> Bool = "@and"
primitive (||) : (Bool, Bool) -> Bool = "@or"

# Box operations
primitive box : a -> Box<a> = "@box"
primitive unbox : Box<a> -> a = "@unbox"
primitive (^) : Box<a> -> a = "@unbox"
let (+=) : (Box<Number>, Number) -> Number = (b, n) => b := ^b + n
let (-=) : (Box<Number>, Number) -> Number = (b, n) => b := ^b - n
let (*=) : (Box<Number>, Number) -> Number = (b, n) => b := ^b * n
let (/=) : (Box<Number>, Number) -> Number = (b, n) => b := ^b / n

# Other operations
primitive ignore : a -> Void = "@ignore"
primitive assert : Bool -> Void = "@assert"
primitive fail : String -> a = "@fail"

# Prints the given value to the console.
import foreign wasm print : a -> Void from 'grainBuiltins'

# Checks the given items for structural equality.
import foreign wasm equal : (a, a) -> Bool as (==) from 'stdlib-external/equal'
let (!=) : (a, a) -> Bool = (x, y) => !(x == y)
# Checks the given items for physical equality.
primitive (is) : (a, a) -> Bool = "@eq"

# Converts the given value to a string
import foreign wasm toString : a -> String from 'grainBuiltins'

export data List<a> = [] | [...](a, List<a>)

# Maybe some data, maybe not!
data Option<a> = Some(a) | None
